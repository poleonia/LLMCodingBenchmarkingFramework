{
    "identifier": "005",
    "description": "Given two 10x10 matrices A and B, compute the matrix resulting from (2A - B^T)^2, where ^T denotes the matrix transpose and ^2 denotes element-wise squaring.",
    "function_prototype": {
        "function_name": "computeMatrixResult",
        "parameters": [
            {
                "name": "A",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix"
            },
            {
                "name": "B",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix"
            }
        ],
        "return_values": [
            {
                "name": "result",
                "type": "10x10 matrix",
                "description": "The resulting 10x10 matrix after the calculation"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "A": [
                    [7, 1, 0, 1, 2, 7, 6, 5, 6, 6],
                    [1, 8, 6, 9, 9, 10, 2, 10, 3, 8],
                    [8, 1, 3, 0, 8, 0, 4, 0, 10, 3],
                    [2, 6, 0, 2, 1, 5, 3, 0, 9, 3],
                    [5, 10, 4, 3, 0, 5, 1, 10, 2, 3],
                    [0, 6, 1, 1, 2, 4, 5, 5, 0, 9],
                    [5, 2, 0, 4, 2, 3, 9, 6, 5, 4],
                    [0, 8, 1, 9, 6, 1, 3, 6, 10, 3],
                    [2, 4, 3, 2, 5, 3, 0, 8, 5, 7],
                    [1, 7, 8, 6, 7, 2, 0, 6, 1, 7]
                ],
                "B": [
                    [9, 4, 7, 3, 10, 4, 1, 8, 9, 6],
                    [9, 7, 3, 0, 6, 8, 2, 7, 4, 4],
                    [2, 6, 2, 0, 0, 3, 1, 4, 6, 8],
                    [2, 0, 0, 2, 6, 4, 9, 9, 9, 3],
                    [10, 0, 8, 9, 7, 7, 8, 5, 5, 2],
                    [10, 0, 1, 0, 6, 10, 10, 2, 10, 3],
                    [1, 10, 6, 9, 1, 10, 10, 10, 9, 7],
                    [2, 0, 7, 5, 7, 7, 6, 10, 1, 7],
                    [4, 1, 6, 9, 5, 3, 7, 2, 2, 6],
                    [2, 7, 1, 10, 6, 8, 2, 5, 6, 10]
                ]
            },
            "expected_output": [
                [
                    [25, 49, 4, 0, 36, 16, 121, 64, 64, 100],
                    [4, 81, 36, 324, 324, 400, 36, 400, 25, 81],
                    [81, 1, 16, 0, 64, 1, 4, 49, 196, 25],
                    [1, 144, 0, 4, 49, 100, 9, 25, 81, 16],
                    [0, 196, 64, 0, 49, 16, 1, 169, 1, 0],
                    [16, 16, 1, 4, 9, 4, 0, 9, 9, 100],
                    [81, 4, 1, 1, 16, 16, 64, 36, 9, 36],
                    [64, 81, 4, 81, 49, 0, 16, 4, 324, 1],
                    [25, 16, 0, 25, 25, 16, 81, 225, 64, 64],
                    [16, 100, 64, 81, 144, 1, 49, 25, 16, 16]

                ]

            ]
        }
    ],
    "tags": [
        "scalar multiplication",
        "matrix subtraction",
        "transpose",
        "element-wise squaring",
        "matrix operation"
    ],
    "prompts": [
		{
			"prompt_id": "optimization for memory usage",
			"prompt": "optimize this code for reducing its memory usage",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_005_cpu(A, B):\\n    # Calculate the transpose of B\\n    B_transpose = [[B[j][i] for j in range(len(B))] for i in range(len(B[0]))]\\n\\n    # Initialize the resulting matrix\\n    result = [[0 for _ in range(len(A))] for _ in range(len(A[0]))]\\n\\n    # Perform the operation (2A - B^T)\\n    for i in range(len(A)):\\n        for j in range(len(A[0])):\\n            result[i][j] = (2 * A[i][j] - B_transpose[i][j])\\n\\n    # Square each element of the resulting matrix\\n    for i in range(len(result)):\\n        for j in range(len(result[0])):\\n            result[i][j] = result[i][j] ** 2\\n\\n    return result"
		}
    ],
   "optimal_solution": "def solve_problem_005_cpu(A, B):\n    # Calculate the transpose of B\n    B_transpose = [[B[j][i] for j in range(len(B))] for i in range(len(B[0]))]\n\n    # Initialize the resulting matrix\n    result = [[0 for _ in range(len(A))] for _ in range(len(A[0]))]\n\n    # Perform the operation (2A - B^T)\n    for i in range(len(A)):\n        for j in range(len(A[0])):\n            result[i][j] = (2 * A[i][j] - B_transpose[i][j])\n\n    # Square each element of the resulting matrix\n    for i in range(len(result)):\n        for j in range(len(result[0])):\n            result[i][j] = result[i][j] ** 2\n\n    return result"

}
