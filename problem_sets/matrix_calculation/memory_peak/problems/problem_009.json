{
    "identifier": "009",
    "description": "Given two 10x10 matrices A and B, find the matrix where each element is the sum of the corresponding row in A and the maximum of the corresponding column in B.",
    "function_prototype": {
        "function_name": "sumRowAndMaxColumn",
        "parameters": [
            {
                "name": "A",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix"
            },
            {
                "name": "B",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix"
            }
        ],
        "return_values": [
            {
                "name": "result",
                "type": "10x10 matrix",
                "description": "The resulting 10x10 matrix after the calculation"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "A": [
                        [
                            6,
                            4,
                            1,
                            9,
                            5,
                            4,
                            6,
                            5,
                            7,
                            4
                        ],
                        [
                            8,
                            4,
                            6,
                            9,
                            0,
                            9,
                            9,
                            1,
                            0,
                            5
                        ],
                        [
                            4,
                            9,
                            1,
                            9,
                            0,
                            9,
                            6,
                            7,
                            6,
                            5
                        ],
                        [
                            8,
                            1,
                            9,
                            2,
                            7,
                            4,
                            7,
                            5,
                            7,
                            6
                        ],
                        [
                            7,
                            8,
                            9,
                            0,
                            2,
                            0,
                            8,
                            7,
                            9,
                            0
                        ],
                        [
                            6,
                            3,
                            0,
                            0,
                            0,
                            6,
                            2,
                            2,
                            3,
                            2
                        ],
                        [
                            1,
                            8,
                            3,
                            2,
                            8,
                            2,
                            1,
                            2,
                            0,
                            4
                        ],
                        [
                            1,
                            3,
                            7,
                            5,
                            6,
                            0,
                            0,
                            1,
                            6,
                            8
                        ],
                        [
                            2,
                            1,
                            1,
                            8,
                            5,
                            8,
                            9,
                            4,
                            0,
                            3
                        ],
                        [
                            4,
                            3,
                            9,
                            2,
                            9,
                            4,
                            2,
                            4,
                            3,
                            9
                        ]
                    ],

                "B": [
                        [
                            2,
                            3,
                            5,
                            1,
                            7,
                            8,
                            8,
                            1,
                            8,
                            0
                        ],
                        [
                            1,
                            2,
                            7,
                            2,
                            3,
                            8,
                            9,
                            2,
                            8,
                            0
                        ],
                        [
                            3,
                            0,
                            6,
                            1,
                            2,
                            5,
                            9,
                            4,
                            4,
                            9
                        ],
                        [
                            3,
                            4,
                            8,
                            6,
                            1,
                            6,
                            7,
                            3,
                            8,
                            7
                        ],
                        [
                            5,
                            5,
                            0,
                            5,
                            0,
                            8,
                            0,
                            5,
                            0,
                            3
                        ],
                        [
                            9,
                            8,
                            5,
                            7,
                            2,
                            2,
                            0,
                            7,
                            0,
                            8
                        ],
                        [
                            6,
                            3,
                            9,
                            8,
                            2,
                            1,
                            2,
                            2,
                            2,
                            4
                        ],
                        [
                            5,
                            5,
                            7,
                            8,
                            7,
                            1,
                            3,
                            1,
                            7,
                            7
                        ],
                        [
                            0,
                            9,
                            2,
                            5,
                            4,
                            9,
                            8,
                            9,
                            6,
                            2
                        ],
                        [
                            2,
                            4,
                            3,
                            4,
                            2,
                            7,
                            7,
                            8,
                            1,
                            8
                        ]
                    ]

            },
            "expected_output": [
                    [
                        [
                            60,
                            60,
                            60,
                            59,
                            58,
                            60,
                            60,
                            60,
                            59,
                            60
                        ],
                        [
                            60,
                            60,
                            60,
                            59,
                            58,
                            60,
                            60,
                            60,
                            59,
                            60
                        ],
                        [
                            65,
                            65,
                            65,
                            64,
                            63,
                            65,
                            65,
                            65,
                            64,
                            65
                        ],
                        [
                            65,
                            65,
                            65,
                            64,
                            63,
                            65,
                            65,
                            65,
                            64,
                            65
                        ],
                        [
                            59,
                            59,
                            59,
                            58,
                            57,
                            59,
                            59,
                            59,
                            58,
                            59
                        ],
                        [
                            33,
                            33,
                            33,
                            32,
                            31,
                            33,
                            33,
                            33,
                            32,
                            33
                        ],
                        [
                            40,
                            40,
                            40,
                            39,
                            38,
                            40,
                            40,
                            40,
                            39,
                            40
                        ],
                        [
                            46,
                            46,
                            46,
                            45,
                            44,
                            46,
                            46,
                            46,
                            45,
                            46
                        ],
                        [
                            50,
                            50,
                            50,
                            49,
                            48,
                            50,
                            50,
                            50,
                            49,
                            50
                        ],
                        [
                            58,
                            58,
                            58,
                            57,
                            56,
                            58,
                            58,
                            58,
                            57,
                            58
                        ]
                    ]
            ]
        }
    ],
    "tags": [
        "row-wise sum",
        "column-wise maximum",
        "matrix operation"
    ],
    "prompts": [
		{
			"prompt_id": "optimization for memory usage",
			"prompt": "optimize this code for reducing its memory usage",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_009_cpu(A, B):\n    result = []\n    for i in range(len(A)):\n        row_sum = sum(A[i])\n        row = []\n        for j in range(len(B[0])):\n            col_max = max(B[k][j] for k in range(len(B)))\n            row.append(row_sum + col_max)\n        result.append(row)\n    return result"
		}
    ],
   "optimal_solution": "def solve_problem_009_cpu(A, B):\n    result = []\n    for i in range(len(A)):\n        row_sum = sum(A[i])\n        row = []\n        for j in range(len(B[0])):\n            col_max = max(B[k][j] for k in range(len(B)))\n            row.append(row_sum + col_max)\n        result.append(row)\n    return result"
}
