{
    "identifier": "010",
    "description": "Given a 10x10 matrix M, calculate the sum of the trace.",
    "function_prototype": {
        "function_name": "calculateTraceSum",
        "parameters": [
            {
                "name": "M",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix where the trace and anti-diagonal will be calculated."
            }
        ],
        "return_values": [
            {
                "name": "result",
                "type": "float",
                "description": "A dictionary with the sum of the trace"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "M": [
                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                    [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
                    [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
                    [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
                    [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
                    [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
                    [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
                    [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
                    [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
                ]
            },
            "expected_output": [
                505
            ]
        }
    ],
    "tags": [
        "matrix trace",
        "anti-diagonal",
        "matrix product",
        "linear algebra"
    ],
    "prompts": [
		{
			"prompt_id": "optimization for runtime on cpu",
			"prompt": "optimize this code for reducing its runtime on cpu",
			"genericize": false,
            "input_code": "def solve_problem_010_cpu(matrix):\n    trace_sum = 0\n    anti_diagonal_product = 1\n    size = len(matrix)  # Assuming the matrix is square\n\n    for i in range(size):\n        trace_sum += matrix[i][i]  # Summing the diagonal elements\n        anti_diagonal_product *= matrix[i][size - 1 - i]  # Product of anti-diagonal elements\n\n        # Check for zero in the anti-diagonal to stop further multiplication\n        if matrix[i][size - 1 - i] == 0:\n            anti_diagonal_product = 0\n            break\n\n    return trace_sum"
		}
    ],
    "optimal_solution": "def solve_problem_010_cpu(matrix):\n    trace_sum = 0\n    anti_diagonal_product = 1\n    size = len(matrix)\n    for i in range(size):\n        trace_sum += matrix[i][i]\n        anti_diagonal_product *= matrix[i][size - 1 - i]\n        if matrix[i][size - 1 - i] == 0:\n            anti_diagonal_product = 0\n            break\n    return trace_sum"
}
