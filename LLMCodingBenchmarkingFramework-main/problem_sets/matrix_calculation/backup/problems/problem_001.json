{
	"identifier": "001",
	"description": "Given two 10x10 matrices A and B, and a scalar value c, compute the matrix (A + B) * c.",
	"function_prototype": {
		"function_name": "computeMatrix",
		"parameters": [
			{
				"name": "A",
				"type": "10x10 matrix"
			},
			{
				"name": "B",
				"type": "10x10 matrix"
			},
			{
				"name": "c",
				"type": "float"
			}
		],
		"return_values": [
			{
				"name": "result",
				"type": "10x10 matrix"
			}
		]
	},
	"correctness_test_suite": [
		{
			"input": {
				"A": [
					[3, 9, 7, 1, 8, 5, 9, 1, 8, 2],
					[4, 7, 3, 4, 6, 6, 2, 3, 2, 4],
					[8, 4, 5, 4, 8, 3, 3, 7, 2, 1],
					[7, 2, 8, 4, 0, 3, 6, 3, 7, 8],
					[0, 1, 2, 8, 8, 1, 1, 2, 6, 2],
					[0, 8, 1, 0, 3, 4, 6, 7, 5, 9],
					[5, 7, 0, 6, 2, 7, 3, 2, 5, 9],
					[5, 3, 2, 5, 8, 9, 3, 0, 1, 8],
					[4, 8, 9, 2, 9, 6, 1, 0, 6, 4],
					[1, 2, 3, 7, 1, 8, 1, 7, 0, 0]
				],
				"B": [
					[8, 3, 4, 3, 0, 6, 4, 6, 3, 7],
					[9, 3, 8, 9, 3, 7, 7, 6, 0, 0],
					[0, 2, 8, 2, 7, 3, 7, 2, 5, 4],
					[5, 1, 9, 6, 2, 2, 4, 4, 6, 7],
					[7, 6, 6, 0, 2, 7, 2, 6, 7, 4],
					[3, 2, 6, 1, 8, 0, 6, 0, 1, 2],
					[2, 6, 4, 0, 7, 8, 8, 5, 4, 7],
					[7, 8, 4, 4, 0, 2, 6, 1, 4, 3],
					[9, 5, 5, 0, 9, 2, 8, 3, 1, 9],
					[7, 6, 9, 9, 1, 9, 1, 2, 9, 8]
				],
				"c": 0.6883420054788196
			},
			"expected_output": [
				[
					[7.571762060267016, 8.260104065745836, 7.571762060267016, 2.7533680219152785, 5.506736043830557, 7.571762060267016, 8.948446071224655, 4.818394038351737, 7.571762060267016, 6.195078049309377],
					[8.948446071224655, 6.883420054788196, 7.571762060267016, 8.948446071224655, 6.195078049309377, 8.948446071224655, 6.195078049309377, 6.195078049309377, 1.3766840109576393, 2.7533680219152785],
					[5.506736043830557, 4.130052032872918, 8.948446071224655, 4.130052032872918, 10.325130082182294, 4.130052032872918, 6.883420054788196, 6.195078049309377, 4.818394038351737, 3.441710027394098],
					[8.260104065745836, 2.065026016436459, 11.701814093139934, 6.883420054788196, 1.3766840109576393, 3.441710027394098, 6.883420054788196, 4.818394038351737, 8.948446071224655, 10.325130082182294],
					[4.818394038351737, 4.818394038351737, 5.506736043830557, 5.506736043830557, 6.883420054788196, 5.506736043830557, 2.065026016436459, 5.506736043830557, 8.948446071224655, 4.130052032872918],
					[2.065026016436459, 6.883420054788196, 4.818394038351737, 0.6883420054788196, 7.571762060267016, 2.7533680219152785, 8.260104065745836, 4.818394038351737, 4.130052032872918, 7.571762060267016],
					[4.818394038351737, 8.948446071224655, 2.7533680219152785, 4.130052032872918, 6.195078049309377, 10.325130082182294, 7.571762060267016, 4.818394038351737, 6.195078049309377, 11.013472087661114],
					[8.260104065745836, 7.571762060267016, 4.130052032872918, 6.195078049309377, 5.506736043830557, 7.571762060267016, 6.195078049309377, 0.6883420054788196, 3.441710027394098, 7.571762060267016],
					[8.948446071224655, 8.948446071224655, 9.636788076703475, 1.3766840109576393, 12.390156098618753, 5.506736043830557, 6.195078049309377, 2.065026016436459, 4.818394038351737, 8.948446071224655],
					[5.506736043830557, 5.506736043830557, 8.260104065745836, 11.013472087661114, 1.3766840109576393, 11.701814093139934, 1.3766840109576393, 6.195078049309377, 6.195078049309377, 5.506736043830557]
				]
			]
		}
	],
	"tags": [
		"matrix addition",
		"scalar multiplication",
		"matrix operation"
	],
	"prompts": [
		{
			"prompt_id": "optimization for memory usage",
			"prompt": "Given Task(format .json): \t\"description\": \"Given two 10x10 matrices A and B, and a scalar value c, compute the matrix (A + B) * c.\",\n\t\"function_prototype\": {\n\t\t\"function_name\": \"computeMatrix\",\n\t\t\"parameters\": [\n\t\t\t{\n\t\t\t\t\"name\": \"A\",\n\t\t\t\t\"type\": \"10x10 matrix\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"B\",\n\t\t\t\t\"type\": \"10x10 matrix\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"c\",\n\t\t\t\t\"type\": \"float\"\n\t\t\t}\n\t\t],\n\t\t\"return_values\": [\n\t\t\t{\n\t\t\t\t\"name\": \"result\",\n\t\t\t\t\"type\": \"10x10 matrix\"\n\t\t\t}\n\t\t]\n\t    and input_code. optimize this code for reducing its memory usage",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_001_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append((A[i][j] + B[i][j]) * c)\n        result.append(row)\n    return result"
		},
		{
			"prompt_id": "optimization for runtime on CPU",
			"prompt": "optimize this code for reducing its runtime on only CPU",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_001_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append((A[i][j] + B[i][j]) * c)\n        result.append(row)\n    return result"
		},
		{
			"prompt_id": "optimization for runtime on GPU",
			"prompt": "optimize this code for reducing its runtime on only GPU",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_001_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append((A[i][j] + B[i][j]) * c)\n        result.append(row)\n    return result"
		}
	],
	"optimal_solution": "def solve_problem_001_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append((A[i][j] + B[i][j]) * c)\n        result.append(row)\n    return result"
}