{
    "identifier": "004",
    "description": "Given two 10x10 matrices A and B, and a scalar value c, compute the element-wise square of (A + B) multiplied by c.",
    "function_prototype": {
        "function_name": "computeElementWiseSquare",
        "parameters": [
            {
                "name": "A",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix"
            },
            {
                "name": "B",
                "type": "10x10 matrix",
                "description": "A 10x10 matrix"
            },
            {
                "name": "c",
                "type": "float",
                "description": "A scalar value used in the operation"
            }
        ],
        "return_values": [
            {
                "name": "result",
                "type": "10x10 matrix",
                "description": "The resulting 10x10 matrix after the calculation"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "A": [
                    [
                        2,
                        6,
                        3,
                        4,
                        9,
                        1,
                        1,
                        3,
                        4,
                        9
                    ],
                    [
                        3,
                        0,
                        8,
                        4,
                        5,
                        3,
                        9,
                        9,
                        2,
                        8
                    ],
                    [
                        4,
                        2,
                        5,
                        8,
                        8,
                        9,
                        4,
                        1,
                        3,
                        9
                    ],
                    [
                        1,
                        0,
                        4,
                        0,
                        1,
                        7,
                        4,
                        6,
                        1,
                        3
                    ],
                    [
                        6,
                        0,
                        9,
                        8,
                        9,
                        5,
                        6,
                        7,
                        5,
                        9
                    ],
                    [
                        2,
                        6,
                        3,
                        0,
                        8,
                        1,
                        4,
                        2,
                        3,
                        9
                    ],
                    [
                        3,
                        0,
                        2,
                        0,
                        1,
                        4,
                        2,
                        7,
                        4,
                        9
                    ],
                    [
                        2,
                        6,
                        0,
                        4,
                        0,
                        7,
                        0,
                        0,
                        3,
                        5
                    ],
                    [
                        6,
                        0,
                        3,
                        9,
                        7,
                        7,
                        5,
                        2,
                        4,
                        2
                    ],
                    [
                        9,
                        3,
                        5,
                        6,
                        9,
                        0,
                        8,
                        9,
                        1,
                        4
                    ]
                ],
                "B": [
                    [
                        0,
                        2,
                        4,
                        1,
                        1,
                        4,
                        7,
                        3,
                        3,
                        4
                    ],
                    [
                        9,
                        0,
                        8,
                        6,
                        1,
                        9,
                        3,
                        2,
                        0,
                        0
                    ],
                    [
                        0,
                        2,
                        1,
                        1,
                        2,
                        6,
                        4,
                        3,
                        7,
                        2
                    ],
                    [
                        7,
                        5,
                        0,
                        1,
                        9,
                        1,
                        2,
                        7,
                        6,
                        5
                    ],
                    [
                        9,
                        1,
                        2,
                        8,
                        4,
                        7,
                        3,
                        3,
                        5,
                        6
                    ],
                    [
                        2,
                        2,
                        6,
                        3,
                        0,
                        7,
                        2,
                        0,
                        4,
                        1
                    ],
                    [
                        2,
                        4,
                        7,
                        6,
                        2,
                        4,
                        0,
                        0,
                        8,
                        3
                    ],
                    [
                        4,
                        9,
                        0,
                        3,
                        1,
                        1,
                        3,
                        8,
                        4,
                        0
                    ],
                    [
                        4,
                        9,
                        5,
                        8,
                        9,
                        3,
                        4,
                        7,
                        5,
                        6
                    ],
                    [
                        2,
                        4,
                        5,
                        3,
                        7,
                        1,
                        6,
                        6,
                        3,
                        7
                    ]
                ],
                "c": 0.027452978946452378
            },
            "expected_output": [
                [
                    [
                        0.10981191578580951,
                        1.7569906525729522,
                        1.3451959683761665,
                        0.6863244736613094,
                        2.7452978946452378,
                        0.6863244736613094,
                        1.7569906525729522,
                        0.9883072420722856,
                        1.3451959683761665,
                        4.639553441950452
                    ],
                    [
                        3.9532289682891424,
                        0.0,
                        7.027962610291809,
                        2.7452978946452378,
                        0.9883072420722856,
                        3.9532289682891424,
                        3.9532289682891424,
                        3.3218104525207375,
                        0.10981191578580951,
                        1.7569906525729522
                    ],
                    [
                        0.43924766314323804,
                        0.43924766314323804,
                        0.9883072420722856,
                        2.2236912946626424,
                        2.7452978946452378,
                        6.176920262951785,
                        1.7569906525729522,
                        0.43924766314323804,
                        2.7452978946452378,
                        3.3218104525207375
                    ],
                    [
                        1.7569906525729522,
                        0.6863244736613094,
                        0.43924766314323804,
                        0.027452978946452378,
                        2.7452978946452378,
                        1.7569906525729522,
                        0.9883072420722856,
                        4.639553441950452,
                        1.3451959683761665,
                        1.7569906525729522
                    ],
                    [
                        6.176920262951785,
                        0.027452978946452378,
                        3.3218104525207375,
                        7.027962610291809,
                        4.639553441950452,
                        3.9532289682891424,
                        2.2236912946626424,
                        2.7452978946452378,
                        2.7452978946452378,
                        6.176920262951785
                    ],
                    [
                        0.43924766314323804,
                        1.7569906525729522,
                        2.2236912946626424,
                        0.2470768105180714,
                        1.7569906525729522,
                        1.7569906525729522,
                        0.9883072420722856,
                        0.10981191578580951,
                        1.3451959683761665,
                        2.7452978946452378
                    ],
                    [
                        0.6863244736613094,
                        0.43924766314323804,
                        2.2236912946626424,
                        0.9883072420722856,
                        0.2470768105180714,
                        1.7569906525729522,
                        0.10981191578580951,
                        1.3451959683761665,
                        3.9532289682891424,
                        3.9532289682891424
                    ],
                    [
                        0.9883072420722856,
                        6.176920262951785,
                        0.0,
                        1.3451959683761665,
                        0.027452978946452378,
                        1.7569906525729522,
                        0.2470768105180714,
                        1.7569906525729522,
                        1.3451959683761665,
                        0.6863244736613094
                    ],
                    [
                        2.7452978946452378,
                        2.2236912946626424,
                        1.7569906525729522,
                        7.933910915524737,
                        7.027962610291809,
                        2.7452978946452378,
                        2.2236912946626424,
                        2.2236912946626424,
                        2.2236912946626424,
                        1.7569906525729522
                    ],
                    [
                        3.3218104525207375,
                        1.3451959683761665,
                        2.7452978946452378,
                        2.2236912946626424,
                        7.027962610291809,
                        0.027452978946452378,
                        5.380783873504666,
                        6.176920262951785,
                        0.43924766314323804,
                        3.3218104525207375
                    ]
                ]
            ]
        }
    ],
    "tags": [
        "matrix addition",
        "scalar multiplication",
        "element-wise squaring",
        "matrix operation"
    ],
    "prompts": [
		{
			"prompt_id": "optimization for memory usage",
			"prompt": "optimize this code for reducing its memory usage",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_004_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append(((A[i][j] + B[i][j]) ** 2) * c)\n        result.append(row)\n    return result"
		},
		{
			"prompt_id": "optimization for runtime on CPU",
			"prompt": "optimize this code for reducing its runtime on only CPU",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_004_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append(((A[i][j] + B[i][j]) ** 2) * c)\n        result.append(row)\n    return result"
		},
		{
			"prompt_id": "optimization for runtime on GPU",
			"prompt": "optimize this code for reducing its runtime on only GPU",
			"genericize": false,
			"sample_inputs_outputs": [
			],
            "input_code": "def solve_problem_004_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append(((A[i][j] + B[i][j]) ** 2) * c)\n        result.append(row)\n    return result"
		}
    ],
   "optimal_solution": "def solve_problem_004_cpu(A, B, c):\n    result = []\n    for i in range(len(A)):\n        row = []\n        for j in range(len(A[0])):\n            row.append(((A[i][j] + B[i][j]) ** 2) * c)\n        result.append(row)\n    return result"

}
